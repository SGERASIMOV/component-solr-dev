application:
  configuration:
    input.solr-version: "4.6.0"
    input.solr-collections: ["collection1","collection2"]
    input.app-port: "8080"
    input.exhibitor-port: "8090"

  interfaces:
    input:
      solr-version: "bind(solr#input.solr-version)"
      solr-collections: "bind(solr#input.solr-collections)"
      app-port: "bind(tomcat#input.app-port)"
      exhibitor-port: "bind(solr#input.exhibitor-port)"
    endpoints:
      zoo-ui: "bind(solr#result.zoo-ui)"
      solr-node: "bind(solr#result.solr-node)"
      solr-url: "bind(solr#result.solr-url)"
    nodes:
      app-hosts: "bind(tomcat#output.app-hosts)"
      app-port: "bind(tomcat#output.app-port)"

  components:
    wfService:
      type: reference.Service
      interfaces:
        executor:
          execute-workflow: receive-command(object request => object status => object status)
          execute-command: send-command(string interface, string command, map<string, object> arguments => map<string, object> response => map<string, object> response)

    secureStore:
      type: reference.Service
      interfaces:
        keypair-store:
          get-keypair: receive-command(string id => object privateKey)

    tomcat:
      type: reference.Submodule
      configuration:
        __locator.application-id: "tomcat"
      interfaces:
        input:
          app-port: configuration(string)
          quantity: configuration(string)
        management:
          deploy-libs: receive-command(list<string> lib-uri)
          deploy-war: receive-command(string war-uri, object environments, object resources)
        output:
          app-hosts: publish-signal(list<string>)
          app-port: publish-signal(string)

    solr:
      type: workflow.Instance
      interfaces:
        input:
          solr-version: configuration(string)
          solr-collections: configuration(list<string>)
          exhibitor-port: configuration(string)
          #constants
          lib-uri: configuration(list<string>)
          war-uri: configuration(string)
        nodes:
          app-hosts: consume-signal(list<string>)
          app-port: consume-signal(string)
        tomcat-actions:
          deploy-libs: send-command(list<string> lib-uri)
          deploy-war: send-command(string war-uri, object environments, object resources)
        keypair-store:
          get-keypair: send-command(string id => object privateKey)
        result:
          solr-url: publish-signal(list<string>)
          solr-node: publish-signal(list<string>)
          zoo-ui: publish-signal(list<string>)

      required: [keypair-store, nodes]

      configuration:
        input.lib-uri: ["file:///tmp/slf4j-1.6.6/slf4j-jdk14-1.6.6.jar", "file:///tmp/slf4j-1.6.6/log4j-over-slf4j-1.6.6.jar", "file:///tmp/slf4j-1.6.6/slf4j-api-1.6.6.jar", "file:///tmp/slf4j-1.6.6/jcl-over-slf4j-1.6.6.jar"]
        input.war-uri: "file:///opt/solr/webapps/solr.war"
        configuration.triggers: {}
        configuration.workflows:
          launch:
            parameters:
              - solr-version:
                  description: Solr version
              - solr-collections:
                  description: Solr collection names to create
              - exhibitor-port:
                  description: Zookeeper exhibitor port
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  phase: get-env-props
                  output:
                    props: result
              - provision-node:
                  action: provisionVms
                  phase: provision-node
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: default
                    hardwareId: ""
                    vmIdentity: ubuntu
                    retryCount: 0
                    staticIps: "{$.props.nodes.app-hosts}"
              - deploy-zoo:
                  action: "chefrun"
                  phase: deploy-zoo
                  precedingPhases: [ provision-node ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[zookeeper-component]" ]
                    recipeUrl: "https://dl.dropboxusercontent.com/u/250836/zookeeper.tar.gz"
                    jattrs:
                      exhibitor:
                        opts:
                          port: "{$.exhibitor-port}"
              - deploy-solr:
                  action: "chefrun"
                  phase: deploy-solr
                  precedingPhases: [ deploy-zoo ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[solr]" ]
                    recipeUrl: "https://dl.dropboxusercontent.com/u/250836/solr.tar.gz"
                    jattrs:
                      solr:
                        version: "{$.solr-version}"
                        collection: "{$.solr-collections}"
                        zookeeper:
                          host: "{$.props.nodes.app-hosts[0]}"
              - deploy-libs:
                  action: serviceCall
                  phase: deploy-libs
                  precedingPhases: [ deploy-solr ]
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: deploy-libs
                    arguments:
                      lib-uri: "{$.lib-uri}"
              - deploy-war:
                  action: serviceCall
                  phase: deploy-war
                  precedingPhases: [ deploy-libs ]
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: deploy-war
                    arguments:
                      war-uri: "{$.war-uri}"
                      resources: {}
                      environments: {
                        "solr/home": {
                          "type": "java.lang.String",
                          "value": "/opt/solr/cores",
                          "override": "true"
                        }
                      }
            return:
              zoo-ui:
                value: "http://{$.props.nodes.app-hosts}:{$.exhibitor-port}/exhibitor/v1/ui/index.html"
              solr-node:
                value: "{$.props.nodes.app-hosts}"
              solr-url:
                value: "http://{$.props.nodes.app-hosts}:{$.props.nodes.app-port}/solr"

          destroy:
            steps: []
  bindings:
    - [solr, wfService]
    - [solr, secureStore]
    - [solr, tomcat]
