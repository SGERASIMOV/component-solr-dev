application:
  configuration:
    input.solr-version: "4.6.0"
    input.solr-collections: ["test_one"]
    input.solr-debug: "5"
    input.app-port: "8080"
    input.exhibitor-port: "8090"
    input.solr-quantity: "4"
    input.solr-shards-num: "2"

  interfaces:
    input:
      solr-version: "bind(solr#input.solr-version)"
      solr-collections: "bind(solr#input.solr-collections)"
      solr-debug: "bind(solr#input.solr-debug)"
      solr-shards-num: "bind(solr#input.solr-shards-num)"
      exhibitor-port: "bind(zookeeper#input.exhibitor-port)"
      app-port: "bind(tomcat#input.app-port, solr#input.solr-port)"
      solr-quantity: "bind(tomcat#input.quantity)"
    endpoints:
      solr-node: "bind(solr#result.solr-node)"
      solr-url: "bind(solr#result.solr-url)"
    nodes:
      app-hosts: "bind(tomcat#output.app-hosts)"
      app-port: "bind(tomcat#output.app-port)"
      zoo-nodes: "bind(zookeeper#output.zoo-nodes)"
      zoo-ui: "bind(zookeeper#output.zoo-ui)"

  components:
    wfService:
      type: reference.Service
      interfaces:
        executor:
          execute-workflow: receive-command(object request => object status => object status)
          execute-command: send-command(string interface, string command, map<string, object> arguments => map<string, object> response => map<string, object> response)

    secureStore:
      type: reference.Service
      interfaces:
        keypair-store:
          get-keypair: receive-command(string id => object privateKey)

    tomcat:
      type: reference.Submodule
      configuration:
        __locator.application-id: "tomcat"
      interfaces:
        input:
          app-port: configuration(string)
          quantity: configuration(string)
        management:
          reconfigure: receive-command(string java-opts)
          deploy-libs: receive-command(list<string> lib-uri)
          deploy-war: receive-command(string war-uri, object context-attrs, object context-nodes)
        output:
          app-hosts: publish-signal(list<string>)
          app-port: publish-signal(string)

    zookeeper:
      type: reference.Submodule
      configuration:
        __locator.application-id: "zoo-cloud"
      interfaces:
        input:
          exhibitor-port: configuration(string)
        output:
          zoo-nodes: publish-signal(list<string>)
          zoo-ui: publish-signal(list<string>)

    solr:
      type: workflow.Instance
      interfaces:
        input:
          solr-port: configuration(string)
          solr-version: configuration(string)
          solr-collections: configuration(list<string>)
          solr-debug: configuration(string)
          solr-shards-num: configuration(string)
        app-nodes:
          app-hosts: consume-signal(list<string>)
          app-port: consume-signal(string)
        zoo:
          zoo-nodes: consume-signal(list<string>)
        tomcat-actions:
          reconfigure: send-command(string java-opts)
          deploy-libs: send-command(list<string> lib-uri)
          deploy-war: send-command(string war-uri, object context-attrs, object context-nodes)
        keypair-store:
          get-keypair: send-command(string id => object privateKey)
        result:
          solr-url: publish-signal(list<string>)
          solr-node: publish-signal(list<string>)

      required: [keypair-store, app-nodes, zoo]

      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            parameters:
              - solr-port:
                  description: Solr app port
              - solr-version:
                  description: Solr version
              - solr-collections:
                  description: Solr collection names
              - solr-debug:
                  description: Debug level
              - solr-shards-num:
                  description: "Number os solr shards"
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  phase: get-env-props
                  output:
                    props: result
              - provision-node:
                  action: provisionVms
                  phase: provision-node
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: default
                    hardwareId: ""
                    vmIdentity: ubuntu
                    retryCount: 0
                    staticIps: "{$.props.app-nodes.app-hosts}"
              - reconfigure-tomcat:
                  action: serviceCall
                  phase: reconfigure-tomcat
                  precedingPhases: [get-env-props]
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: reconfigure
                    arguments:
                      java-opts: "$${{JAVA_OPTS}} -DnumShards={$.solr-shards-num}"
              - deploy-solr:
                  action: "chefrun"
                  phase: deploy-solr
                  precedingPhases: [ reconfigure-tomcat ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[solr]" ]
                    recipeUrl: "https://dl.dropboxusercontent.com/u/250836/solr-cloud.tar.gz"
                    jattrs:
                      solr:
                        port: "{$.solr-port}"
                        hostcontext: "solr"
                        version: "{$.solr-version}"
                        collection: "{$.solr-collections}"
                        #zookeeper:
                          #nodes: "{$.props.zoo.zoo-nodes}"
                  output:
                    chefAttrs: chefState
              - create-collections:
                  action: "chefrun"
                  phase: create-collections
                  precedingPhases: [ deploy-solr ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[solr::create_collection]" ]
                    recipeUrl: "https://dl.dropboxusercontent.com/u/250836/solr-cloud.tar.gz"
                    jattrs:
                      solr:
                        port: "{$.solr-port}"
                        hostcontext: "solr"
                        version: "{$.solr-version}"
                        collection: "{$.solr-collections}"
                        zookeeper:
                          hosts: "{$.props.zoo.zoo-nodes}"
              - deploy-libs:
                  action: serviceCall
                  phase: deploy-libs
                  precedingPhases: [ deploy-solr ]
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: deploy-libs
                    arguments:
                      lib-uri: "{$.chefAttrs['*'][0]['solr']['lib_uri']}"
              - deploy-war:
                  action: serviceCall
                  phase: deploy-war
                  precedingPhases: [ deploy-libs ]
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: deploy-war
                    arguments:
                      war-uri: "file://{$.chefAttrs['*'][0]['solr']['war_uri']}"
                      context-attrs: {
                        "docBase": "{$.chefAttrs['*'][0]['solr']['war_uri']}",
                        "debug": "{$.solr-debug}",
                        "crossContext": "true",
                        "privileged": "true",
                        "allowLinking": "true"
                      }
                      context-nodes:
                        - Environment: {
                            "name": "solr/home",
                            "type": "java.lang.String",
                            "value": "/opt/solr/cores",
                            "override": "true"
                          }

            return:
              solr-node:
                value: "{$.props.app-nodes.app-hosts}"
              solr-url:
                value: "http://{$.props.app-nodes.app-hosts}:{$.props.app-nodes.app-port}/solr"

          destroy:
            steps: []
  bindings:
    - [solr, wfService]
    - [solr, secureStore]
    - [solr, tomcat]
    - [solr, zookeeper]